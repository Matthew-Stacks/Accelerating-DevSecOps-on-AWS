version: 0.2

env:
  variables:
     ACCOUNT_ID: "<YourAccountNo>"
     AWS_REGION: "us-east-1"
     PROJECT_NAME: "catalogapp"
     EKS_CLUSTER_NAME: "catalogapp-prd"
  parameter-store:
     REPOSITORY_URI: "catalog_detail"
phases:
  install:
    commands:
      - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - export KUBECONFIG=$HOME/.kube/config
  #pre_build:
    #commands:
  build:
    commands:
      - |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME
        DEPLOYMENT_NAME=proddetail
        CONTAINER_NAME=proddetail
        CURRENT_DEPLOYED_IMAGE=$(kubectl get deployment $DEPLOYMENT_NAME -n prodcatalog-ns -o=jsonpath='{$.spec.template.spec.containers[:1].image}' 2>/dev/null)
        if [ -z ${CURRENT_DEPLOYED_IMAGE} ]; then
                echo "Deployment Doesn't exists"
                echo "Deploying the Current Image version ..."
                echo $REPOSITORY_URI
                envsubst < catalog_detail/kubespec/canary/catalogdetailcanarydeploy.yaml | kubectl apply -f -
                echo "Checking Canary status"
                ATTEMPTS=0
                ROLLOUT_STATUS_CMD=$(kubectl get canary $DEPLOYMENT_NAME -n prodcatalog-ns | | sed '1d' | awk '{print $2}')
                until [ "$ROLLOUT_STATUS_CMD" == "Initialized" ] || [ $ATTEMPTS -eq 60 ]; do
                  echo "Initialization in Progress"
                  ROLLOUT_STATUS_CMD=$(kubectl get canary $DEPLOYMENT_NAME -n prodcatalog-ns | | sed '1d' | awk '{print $2}')
                  ATTEMPTS=$((ATTEMPTS + 1))
                  sleep 10
                done
                echo "Service has been Initialized"
        else
                echo "the current image is $CURRENT_DEPLOYED_IMAGE"
                if [ $REPOSITORY_URI == $CURRENT_DEPLOYED_IMAGE ]; then
                        echo "There is no Change in the Deployment"
                else
                        echo "There is change in the deployment Image version"
                        echo "Rolling out new version ..."
                        kubectl set image deployment $DEPLOYMENT_NAME $CONTAINER_NAME=$REPOSITORY_URI -n prodcatalog-ns
                        ok=false
                        until ${ok}; do
                            kubectl get canary ${DEPLOYMENT_NAME} -n prodcatalog-ns | grep 'Progressing' && ok=true || ok=false
                            sleep 5
                        done
                        # wait for the canary analysis to finish
                        kubectl wait canary ${DEPLOYMENT_NAME} -n prodcatalog-ns --for=condition=Promoted --timeout=10m
                        # check if the deployment was successful 
                        STATUS=$(kubectl get canary ${DEPLOYMENT_NAME} -n prodcatalog-ns | sed '1d' | awk '{print $2}')
                        if [ "$STATUS" == 'Succeeded' ]; then
                          echo "Canary deployment has been completed with success"
                        else
                          echo "Canary deployment has been completed with $STATUS"
                          exit 1
                        fi
                fi
        fi
